///////////////////////////////////////////////////////////
//  HeatMap.cs
//  Implementation of the Class HeatMap
//  Generated by Enterprise Architect
//  Created on:      04-Apr-2015 2:27:13 PM
//  Original author: Marko
///////////////////////////////////////////////////////////




using System.Drawing;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System;
using System.Security.Permissions;
using LoL_URF_HybridStats_vs12.ViewModels;

[Serializable]
public class HeatMap : ViewModelBase,  ISerializable
{
    private long _count;
    private List<float> _xValues;
    private List<float> _yValues;
    private Image _baseImage;
    private string _baseImagePath;
    private Image _heatImage;
    private string _heatImagePath;

    public long Count
    {
        get { return _count; }
        set
        {
            _count = value;
            this.OnPropertyChanged("Count");
        }
    }

    public List<float> XValues
    {
        get { return _xValues; }
        set
        {
            _xValues = value;
            this.OnPropertyChanged("XValues");
        }
    }

    public List<float> YValues
    {
        get { return _yValues; }
        set
        {
            _yValues = value;
            this.OnPropertyChanged("YValues");
        }
    }

    public Image BaseImage
    {
        get { return _baseImage; }
        set
        {
            _baseImage = value;
            this.OnPropertyChanged("BaseImage");
        }
    }

    public string BaseImagePath
    {
        get { return _baseImagePath; }
        set
        {
            _baseImagePath = value;
            this.OnPropertyChanged("BaseImagePath");
        }
    }

    public Image HeatImage
    {
        get { return _heatImage; }
        set
        {
            _heatImage = value;
            this.OnPropertyChanged("HeatImage");
        }
    }

    public string HeatImagePath
    {
        get { return _heatImagePath; }
        set
        {
            _heatImagePath = value;
            this.OnPropertyChanged("HeatImagePath");
        }
    }

	public HeatMap(){
        _xValues = new List<float>();
        _yValues = new List<float>();
	}

    public void GetObjectData(SerializationInfo info, StreamingContext ctxt)
    {
        info.AddValue("xValues", this._xValues);
        info.AddValue("yValues", this._yValues);
        info.AddValue("baseImage", this._baseImage);
        info.AddValue("baseImagePath", this._baseImagePath);
        info.AddValue("heatImage", this._heatImage);
        info.AddValue("heatImagePath", this._heatImagePath);
    }

    protected HeatMap(SerializationInfo info, StreamingContext context)
    {
        if (info == null)
            throw new System.ArgumentNullException("info");
        _xValues = (List<float>)info.GetValue("xValues", typeof(List<float>));
        _yValues = (List<float>)info.GetValue("yValues", typeof(List<float>));
        _baseImage = (Image)info.GetValue("baseImage", typeof(Image));
        _baseImagePath = (string)info.GetValue("baseImagePath", typeof(string));
        _heatImage = (Image)info.GetValue("heatImage", typeof(Image));
        _heatImagePath = (string)info.GetValue("heatImagePath", typeof(string));
    }

	/// 
	/// <param name="y"></param>
	/// <param name="x"></param>
	public void AddNewPoint(float x, float y){
        _xValues.Add(x);
        _yValues.Add(y);
	}

	/// 
	/// <param name="y"></param>
	/// <param name="x"></param>
	public void AddArrayOfPoints(float[] x, float[] y){
        _xValues.AddRange(x);
        _yValues.AddRange(y);
	}

	public void GenerateHeatMap(){

	}

}//end HeatMap